
public class prng {
	private int count = 0;




	private long x = 123456,y = 78921,z = 12315,w = 56788;
	private long out;
    private long b_value = 9345833;
    private long m_value = 4292870399l;
    
    private long x1 = 33972236928L;
    private long x2 = 123143225L;
    
    public long getw()
    {
    	return w;
    }
    
    public void BBS()
    {
    	b_value = (b_value * b_value) % m_value;
    }
    
	public void xorshift()
	{
		long t;
		{
			t = (x  ^ (x  << 11)) & 4294967295L;
		    x  = y & 4294967295L ; y  = z & 4294967295L ; z  = w & 4294967295L ;
		    w  = (w  ^ (w  >> 19) ^ (t ^ (t >> 8))) & 4294967295L;
		    out = w;
		}

	}
	
	public void xorshift64_1()
	{
		x1 = x1 ^ (x1 << 13);
	    x1 = x1 ^ (x1 >> 35);
	    x1 = x1 ^ (x1 << 30);
	}
	
	public void xorshift64_2()
	{
		x2 = x2 ^ (x2 << 23);
	    x2 = x2 ^ (x2 >> 13);
	    x2 = x2 ^ (x2 << 58);
	}

	private long a = 0x9e3779b9;
	private long b = 0x9e3779b9;
	private long c = 0x9e3779b9;
	private long d = 0x9e3779b9;
	private long e = 0x9e3779b9;
	private long f = 0x9e3779b9;
	private long g = 0x9e3779b9;
	private long h = 0x9e3779b9;

	public void mix_1()
	{
		a^=b<<11; d+=a; b+=c;
		b^=c>>2;  e+=b; c+=d;
		c^=d<<8;  f+=c; d+=e;
		d^=e>>16; g+=d; e+=f;
		e^=f<<10; h+=e; f+=g;
		f^=g>>4;  a+=f; g+=h;
		g^=h<<8;  b+=g; h+=a;
		h^=a>>9;  c+=h; a+=b;
	}

	public void mix()
	{
		switch(count)
		{
		case 0: mix_1(); out = a & 4294967295L; count ++; break;
		case 1: out = b & 4294967295L; count ++; break;
		case 2: out = c & 4294967295L; count ++; break;
		case 3: out = d & 4294967295L; count ++; break;
		case 4: out = e & 4294967295L; count ++; break;
		case 5: out = f & 4294967295L; count ++; break;
		case 6: out = g & 4294967295L; count ++; break;
		case 7: out = h & 4294967295L; count = 0; break;
		}
	}

	private long init = 0;

	public void mix_chaotic()
	{
		switch(count)
		{
		case 0: mix_1(); out = (init ^ a ^ b ^ c) & 4294967295L; count++; break;
		case 1: out = (init ^ d ^ e ^ f) & 4294967295L; count++; break;
		case 2: out = (init ^ g ^ h) & 4294967295L; count=0; break;
		}
	}

	private long tmp_v1 = 1231;
	public void CS_Version1_CI()
	{
		
		long tmp1;
		for(int i=0;i<4;i++)
		{
			tmp_v1 = tmp_v1 << 4;
			BBS();
			xorshift();
			tmp1 = w;
			c = 12 + (b_value&1);
			for(int j=0; j<c; j++)
			{
				tmp_v1 = tmp_v1 ^ (1<<(3&tmp1));
				tmp1 = tmp1 >> 2;
			}
			tmp_v1 = tmp_v1 << 4;
			c = 12 + ((b_value>>1)&1);
			for(int j=0; j<c; j++)
			{
				tmp_v1 = tmp_v1 ^ (1<<(3&tmp1));
				tmp1 = tmp1 >> 2;
			}
		}
		out = tmp_v1;
	}

	private long tmp_v4 = 14414;
	public void CS_Version4_CI()
	{
		xorshift64_1();
	    xorshift64_2();
	    BBS();
	    if((b_value&1) == 1)
	    {
	        tmp_v4 = tmp_v4 ^ (0xffffffff & (x1 >> 32));
	    }
	    if((b_value & 2) == 2)
	    {
	        tmp_v4 = tmp_v4 ^ (x1 & 0x0ffffffff);
	    }
	    if((b_value & 4)==4)
	    {
	        tmp_v4 = tmp_v4 ^ (0xffffffff &(x2 >> 32));
	    }
	    tmp_v4 = tmp_v4 ^ (x2 & 0x0ffffffff);
	    out = tmp_v4;
	}
	
	public long output()
	{
		return out;
	}

}

