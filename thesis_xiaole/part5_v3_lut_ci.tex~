\chapter{Version 3 LUT CI(XORshift,XORshift) algorithms}
\label{LUT CI(XORshift,XORshift) algorithms and example}
\section{Introduction}

The LUT (Lookup-Table) CI generator is an improved version of the new CI generator. The key-ideas are:
\begin{itemize}
\item To use a Lookup Table for a faster generation of strategies. These strategies satisfy the same property than the ones provided by the decimation process.
\item And to use all the bits provided by the two inputted generators (to discard none of them).
\end{itemize}
%Before putting these key-ideas together, we can make a first practical remark in order to improve the speed of all of our generators.
These key-ideas are put together by the following way.

%In the LUT version of the proposed generator, chaotic iterations are realized as in the new CI PRNG, in order to generate a sequence $\left(x^n\right)_{n\in\mathds{N}} \in \left(\mathds{B}^N\right)^\mathds{N}$ of Boolean vectors ($N \in \mathds{N}^*, N \geqslant 2$).
Let us firstly recall that in chaotic iterations, only the cells designed by $S^{n}-$th are ``iterated'' at the $n^{th}$ iteration.
$S^n$ can be either a component (\emph{i.e.}, only one cell is updated at each iteration, so $S^n \in \llbracket 1;N \rrbracket$) or a subset of components (any number of cells can be updated at each iteration, that is, $S^n \subset \llbracket 1;N \rrbracket$).
The first kind of strategies are called ``unary strategies'' whereas the second one are denoted by ``general strategies''.
In the last case, each term $S^n$ of the strategy can be represented by an integer lower than $2^N$, designed by $\mathcal{S}^n$, for a system having $N$ bits: the $k^{th}$ component of the system is updated at iteration number $n$ if and only if the $k^{th}$ digit of the binary decomposition of $\mathcal{S}^n$ is 1.
For instance, let us consider that $\mathcal{S}^n=5$, and that we iterate on a system having 6 bits ($N=6$).
As the integer 5 has a binary decomposition equal to 000101, we thus conclude that the cells number 1 and 3 will be updated when the system changes its state from $x^{n}$ to $x^{n+1}$.
In other words, in that situation, $\mathcal{S}^n=5 \in \llbracket 0,2^6-1\rrbracket \Leftrightarrow S^n = \{1, 3\} \subset \llbracket 1, 6 \rrbracket$.
To sum up, to provide a general strategy of $\llbracket 1;N \rrbracket$ is equivalent to give an unary strategy in $\llbracket 0; 2^N-1 \rrbracket$.
Let us now take into account this remark.

Until now the proposed generators have been presented in this document by using unary strategies (obtained by the first inputted PRNG $S$) that are finally grouped by ``packages'' (the size of these packages is given by the second generator $m$): after having used each terms in the current package $S^{m^n},...,S^{m^{n+1}-1}$, the current state of the system is published as an output.
Obviously, when considering the new CI version, these packages of unary strategies defined by the couple $(S,m)\in \llbracket 1;N \rrbracket \times \llbracket 0;N \rrbracket$ correspond to subsets of $\llbracket 1;N \rrbracket$ having the form $\left\{S^{m^n},...,S^{m^{n+1}-1}\right\}$, which are general strategies.
As stated before, these lasts can be rewritten as unary strategies that can be described as sequences in $\llbracket 0; 2^N-1 \rrbracket$.



The advantage of such an equivalency is to reduce the complexity of the proposed PRNG.
Indeed the new CI($S$,$m$) generator can be written as:
\begin{equation}
x^n = x^{n-1} \wedge \mathcal{S}^n.
\end{equation}
where $\mathcal{S}$ is the unary strategy (in $\llbracket 0; 2^N-1 \rrbracket$) associated to the couple $(S,m)\in \llbracket 1;N \rrbracket \times \llbracket 0,N \rrbracket$.

The speed improvement is obvious, the sole issue is to understand how to change $(S,m)$ by $\mathcal{S}$.
The problem to consider is that all the sequences of $\llbracket 0; 2^n-1 \rrbracket$ are not convenient.
Indeed, the properties required for the couple $(S,m)$ ($S$ must not be uniformly distributed, and a cell cannot be changed twice between two outputs) must be translated in requirements for $\mathcal{S}$ if we want to satisfy both speed and randomness.
Such constrains are solved by working on the sequence $m$ and by using some well-defined Lookup Tables presented in the following sections.


%In the LUT CI generator, chaotic iterations are realized as follows.
%Initial state  is listed in a Lookup Table (denoted by LUT-2), as it is explained in Section~\ref{LUT2}.
%The value of $S^n$ will be randomly selected by the two XORshift sequence.
%In fact, $m$ is defined by the XORshift1 means how many cells will be updated, and $w$ is defined by the XORshift2 means which cells will be updated.

%More precisely, at each iteration, only $S^n$($S^n=lut2[m][w]$)-th component of state $x^{n-1}$ is updated by the vectorial Boolean negation as follows




\section{Sequence $m$}
\label{LUT1}

In order to improve the speed of the proposed generator, the first plan is to take the best usage of the bits generated by the inputted PRNGs.
The problem is that the PRNG generating the integers of $m^n$ does not necessary takes its values into $\llbracket 0, N \rrbracket$, where $N$ is the size of the system.

For instance, in the new CI generator presented previously, this sequence is obtained by a XORshift, which produces integers belonging into $\llbracket 0, 2^{32}-1 \rrbracket$.
However, the iterated system has 4 cells ($N=4$) in the example proposed previously thus, to define the sequence $m^n$, we compute the remainder modulo 4 of each integer provided by the XORshift generator.
In other words, only the last 4 bits of each 32 bits vector generated by the second XORshift are used.
Obviously this stage can be easily optimized, by splitting this 32-bits vector into 8 subsequences of 4 bits.
Thus, a call of XORshift() will now generate 8 terms of the sequence $m$, instead of only one term in the former generator.

This common-sense action can be easily generalized to any size $N \leqslant 32$ of the system by the procedure described in Algorithm \ref{b fuction}. The idea is simply to make a shift of the binary vector $a$ produced by the XORshift generator, by 0, $N$, $2N$,... bits to the right, depending on the remainder $c$ of $n$ modulo $\lfloor N/32 \rfloor$ (that is, $a \gg (N \times c)$), and to take the bits between the positions $32-N$ and $32$ of this vector (corresponding to the right part ``$\& (2^N-1)$'' of the formula).
In that situation, all the bits provided by XORshift are used when $N$ divide 32.

%For XORshift PRNG, the output state is 32 bits integer, to improve the efficiency of data usage, we can try extracting every $N$($N\leqslant32$) bits of the variable of XORshift inside the $\lfloor32/N\rfloor$ cycles, according to the following Algorithm~\ref{b fuction}:

\begin{algorithm}
\begin{algorithmic}[1]
\STATE $c=n~mod~\lfloor32/N\rfloor$
\IF {$c=0$}
  \STATE $a \leftarrow XORshift()$
\ENDIF

  \STATE $b^n\leftarrow (a\gg (N \times c))\& (2^N-1)$
\STATE Return {$b^n$}
\medskip
\end{algorithmic}
\caption{Generation of sequence $b^n$}
\label{b fuction}
\end{algorithm}

This Algorithm \ref{b fuction}~~ produces a sequence $(b^n)_{n \in \mathds{N}}$ of integers belonging into $\llbracket 0, 2^N-1 \rrbracket$.
It is now possible to define the sequence $m$ by adapting the Equation~\ref{Formula} as follows.


\begin{equation}
\label{Formula2}
m^n = f(b^n)=
\left\{
\begin{array}{l}
0 \text{ if }0				\leqslant {b^n} < {C^0_N},\\
1 \text{ if }{C^0_N}	\leqslant {b^n} < \sum_{i=0}^1 {C^i_N},\\
2 \text{ if }\sum_{i=0}^1{C^i_N}	\leqslant {b^n} < \sum_{i=0}^2 {C^i_N},\\
\vdots~~~~~					~~\vdots~~~		    ~~~~\\
N \text{ if }\sum_{i=0}^{N-1} {C^i_N}	\leqslant {b^n} < 2^N.\\
\end{array}
\right.
\end{equation}

This common-sense measure can be improved another time if $N$ is not very large by using the first Lookup Table of this document, which is called LUT-1.
This improvement will be firstly explained through an example.

Let us consider that $N=4$, so the sequence $(b^n)_{n \in \mathds{N}}$ belongs into $\llbracket 0, 15 \rrbracket$.
The function $f$ of Equation \ref{Formula2} must translate each $b^n$ into an integer $m^n \in \llbracket 0,4 \rrbracket$, in such a way that the non-uniformity exposed previously is respected.
Instead of defining the function $f$ analytically, a table can be given containing all the images of the integers into $\llbracket 0, 15 \rrbracket$ (see Table \ref{LUT1 for example} for instance).
As stated before, the frequencies of occurrence of the images 0,1,2, 3, and 4 must be respectively equal to $\frac{C_4^0}{2^4}$, $\frac{C_4^1}{2^4}$, $\frac{C_4^2}{2^4}$, $\frac{C_4^3}{2^4}$, and $\frac{C_4^4}{2^4}$.
This requirement is equivalent to demand $C_N^i$ times the number $i$, which can be translated in terms of permutations.
For instance, when $N=4$, any permutation of the list [0,1,1,1,1,2,2,2,2,2,2,3,3,3,3,4] is convenient to define the image of [0,1,2,...,14,15] by $f$.

%If $N$ is not very big, we can speed up the computing by costing the memory source.  To achieve this,
%LUT-1 is established to comply with Equation~\ref{Formula2}. The input of LUT-1 is a N-bits data which is uniformly located on $[0,2^N-1]$, and this input value will be achieved from XORshift1's output. By Algorithm~\ref{b fuction}, for maximizing the usage, it will be divided to $32/N$ parts, and every part could be used as the input of LUT-1, for example, if $N=4$, then one XORshift1 process can obtain $32/4=8$ inputs for LUT-1. By the way, with a same distribution as Equation~\ref{Formula2}, the values in LUT-1 can be distributed with arbitrary order. The creation of LUT-1's procedure is presented in Algorim~\ref{LUT1 creation}, where the $lut1$ is the data set which be used to look up the outputs, and the order of the output data in $lut1$ could be altered randomly as mentioned above. And Table~\ref{LUT1 for example} shows one example LUT-1 for when $N=4$.
This improvement is implemented in Algorithm \ref{LUT1 creation}, which return a table $lut1$ such that $m^n=lut1[b^n]$.

\begin{algorithm}
\caption{The LUT-1 table generation}\label{LUT1 creation}
\begin{algorithmic}[1]

    \FOR{$j=0...N$}
        \STATE $i=0$
        \WHILE{$i<C_N^j$}
             \STATE $lut1[i]=j$
             \STATE $i=i+1$
         \ENDWHILE
    \ENDFOR
\STATE Return $lut1$
\end{algorithmic}
\end{algorithm}

\begin{table*} 
\renewcommand{\arraystretch}{1.3}
\caption{A LUT-1 table for $N=4$}
\label{LUT1 for example}
\centering
  \begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
    \hline
 $b^n$  & 0 & 1 & 2 & 3 & 4 & 5 & 6 & 7 &8 &9 &10 &11 &12 &13 &14 &15\\ \hline\hline
 $m^n$ & 0 & 1 & 1 & 1 & 1 & 2 & 2 & 2 & 2 & 2 & 2 & 3 & 3 &3 & 3 &4 \\ \hline

  \end{tabular}
\end{table*}


% \section{Sequence $w$}
% \label{Sequence w}
% It has been shown in Section~\ref{algo m} that there are $C^m_N$ probabilities for $m$ cells selected to update in a $N$ bits state.
% To define $w$ which is located randomly in $\llbracket 1; C^m_N-1\rrbracket$, another XORshift sequence is used:
% \begin{equation}
% w=XORshift2()~mod~C^m_N
% \end{equation}

\section{Defining the chaotic strategy $\mathcal{S}$ with a LUT}
\label {LUT2}
% For the $m$ computation, first of all, according to the Equation~\ref{Formula}, the numbers of all $m$ outputs
% can be separated to $2^N$ parts, and among these parts, there are $C^1_N=1$ part of $m$ outputs is 1,
% $C^2_N$ are 2, ... $C^N_N=1$ is N. Then a table (LUT-1) of $m$ could be produced, for example,
% Table~\ref{LUT1 for example} shows the condition of $N=3$, there $2^N=8$ options. Lastly, for maximizing the
% usage of first XORshift output (number with 32 bits), this output is divided into $32/N$ parts, and one output of
% XORshift could be used to look up the table $32/N$ times, since every part is N bits number ($[0,2^N-1)$).
% For example, if $N=4$, then output of XORshift could be used $32/4=8$ times.

The definition of the sequence $m$ allows to determine the number of cells that have to change between two outputs of the LUT CI generator.
There are $C_N^m$ possibilities to change $m$ bits in a vector of size $N$.
As we have to choose between these $C_N^m$ possibilities, we thus introduce the following sequence:
\begin{equation}
w^n=XORshift2()~mod~C^m_N
\end{equation}

With this material it is now possible to define the LUT that provides convenient strategies to the LUT CI generator.
If the size of the system is $N$, then this table has $N+1$ columns, numbered from 0 to $N$.
The column number $m$ contains $C_N^m$ values.
All of these values have in common to present exactly $m$ times the digit 1 and $N-m$ times the digit 0 in their binary decomposition.
The order of appearance of these values in the column $m$ has no importance, the sole requirement is that no column contains a same integer twice.
Let us remark that this procedure leads to several possible LUTs.

\begin{algorithm}
\caption{$LUT21$ procedure}\label{LUT2_m creation}
\begin{algorithmic}[1]
\STATE Procedure~{LUT21}{($M,N,b,v,c$)}
\STATE $count\gets c$
\STATE $value\gets v$
 \IF {$count==M$}
    \STATE $lut2[M][num] = value$
    \STATE $num = num + 1$
  \ELSE
     \FOR {$i=b....N$}
     \STATE $value = value + 2^i$
     \STATE $count = count + 1$
     \STATE  Call {recurse LUT21}{($M,N,i+1,value,count$)}
     \STATE $value = v$
     \STATE $count = c$
   \ENDFOR
 \ENDIF
\STATE End Procedure
\end{algorithmic}
\end{algorithm}

An example of such a LUT is shown in Table \ref{LUT2 for example}, when Algorithm \ref{LUT2 creation} gives a concrete procedure to obtain such tables.
This procedure makes recursive calls to the function $LUT21$ defined in Algorithm \ref{LUT2_m creation}.
The $LUT21$ uses the following variables.
b is used to avoid overlapping computations between two recursive calls, v is to save the sum value between these calls, and c counts the number of cells that have already been processed.
These parameters should be initialized as $0$.
For instance, the LUT presented in Table \ref{LUT2 for example} is the $lut2$ obtained in Algorithm \ref{LUT2_m creation} with $N=4$.


\begin{algorithm}
\caption{LUT-2 generation}\label{LUT2 creation}
\begin{algorithmic}[1]

 \FOR {$i=0....N$}
    \STATE Call {LUT21}{($i,N,0,0,0$)}
  \ENDFOR
\STATE Return lut2

\end{algorithmic}
\end{algorithm}



\begin{table} 
\renewcommand{\arraystretch}{1.3}
\caption{Example of a LUT for $N=4$}
\label{LUT2 for example}
\centering
  \begin{tabular}{|l||c|c|c|c|c|}\hline
\backslashbox{$w$}{$m$}
 & $m=0$ & $m=1$ & $m=2$ & $m=3$ & $m=4$ \\ \hline\hline
$w = 0$ & 0 & 1 & 3 & 7 & 15  \\ \hline
$w = 1$ &   & 2 & 5 & 11 &   \\ \hline
$w = 2$ &   & 4 & 6 & 13 & \\ \hline
$w = 3$ &   & 8 & 9 & 14 & \\ \hline
$w = 4$ &   &   & 10 &   & \\ \hline
$w = 5$ &   &   & 12 &   &  \\ \hline
  \end{tabular}
\end{table}



\section{LUT CI(XORshift,XORshift) Algorithm}

The LUT CI generator is defined by the following dynamical system:
\begin{equation}
x^n = x^{n-1} \wedge \mathcal{S}^n.
\end{equation}
where $x^O\in \llbracket 0,2^N-1$ is a seed and $\mathcal{S}^n = lut2[w^n][m^n] = lut2[w^n][lut1[b^n]]$, in which $b^n$ is provided by Algorithm \ref{b fuction} and $w^n=XORshift2()~mod~C^m_N$.
An iteration of this generator is written in Algorithm~\ref{LUT CI algo}.
Let us finally remark that the two inputted XORshift can be replaced by any other operating PRNG.

 \begin{algorithm}
 \caption{LUT CI (XORshift,XORshift) algorithm}\label{LUT CI algo}
 \begin{algorithmic}[1]

\STATE $c=n~mod~\lfloor32/N\rfloor$
\IF {$c=0$}
  \STATE $a\leftarrow XORshift1()$
\ENDIF

  \STATE $b^n\leftarrow (a\gg (N\times c))\& (2^N-1)$

    \STATE $m^n = lut1[b^n]$

    \STATE $d^n = XORshift2()$
    \STATE $w^n = b^n~mod~C^m_N$
    \STATE $S^n = lut2[m][w]$
    \STATE $x = x \wedge S^n$
    \STATE Return $x$

 \end{algorithmic}
 \end{algorithm}

\section{LUT CI(XORshift,XORshift) example of use}


In this example, $N = 4$ is chosen another time for easy understanding.
As before, the initial state of the system $x^0$ can be seeded by the decimal part $t$ of the current time.
With the same current time than in the examples exposed previously, we have $x^0 = ( 0, 1, 0, 0)$ (or $x^0=4$).

Algorithm~\ref{LUT1 creation} provides the LUT-1 depicted in Table~\ref{LUT1 for example}.
The first XORshift generator has returned $y = 0, 11, 7, 2, 10, 4, 1, 0, 3, 9,...$.
By using this LUT, we obtain $m = 0, 3, 2, 1, 2, 1, 1, 0, 1, 2,...$.
Then the Algorithm~\ref{LUT2 creation} is computed, leading to the LUT-2 given by Table~\ref{LUT2 for example}.

So chaotic iterations of Algorithm~\ref{LUT CI algo} can be realized, to obtain in this example: 0100100101010001... or 4,9,5,1...

\begin{tiny}
\begin{table} 
%\renewcommand{\arraystretch}{1.3}
\centering
\begin{tabular}{|c|c|c|c|c|}
\hline
$m$ &0 & 3 &2&1  \\ \hline
$c$  & 0 & 2&5&2\\ \hline
$S$  & 0& 13&12&4  \\ \hline
$x^{0}$ & $x^{0}$ &$x^{1}$ &$x^{2}$& $x^{3}$  \\
$0$ & $0$&$1$ & $0$& $0$\\
$1$ & $1$&$0$ & $1$& $0$\\
$0$ & $0$&$0$ & $0$& $0$ \\
$0$ & $0$&$1$ & $1$& $1$\\
\hline
\end{tabular}\\
\vspace{0.5cm}
Binary Output: $x_1^{0}x_2^{0}x_3^{0}x_4^{0}x_1^{1}x_2^{1}x_3^{1}x_4^{1}x_1^{2}x_2^{2}... = 0100100101010001...$\\
Integer Output:
$x^{0},x^{1},x^{2},x^{3}... = 4,11,8,1...$
\caption{Example of a LUT CI(XORshift,XORshift) generation}
\label{lut table application example}
\end{table}
\end{tiny}

